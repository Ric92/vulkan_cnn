#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430, binding=0) buffer inW { float layer_W[]; };
layout(std430, binding=1) buffer indW { float layer_dW[]; };

// TODO: Use macro defined in header for Tensor?
struct dims {
    uint height;
    uint width;
};

layout(push_constant) uniform params {
    float lr;
    dims dim;
};

void main(){
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;

    if(dim.width == 1){
        uint idx = x + y;
        if(idx >= dim.height)return;
        layer_W[idx] -= lr*layer_dW[idx];
    } else {
        if(x >= dim.height || y >= dim.width)return;
        layer_W[x*dim.width + y] -= lr*layer_dW[x*dim.width + y];
    }
}